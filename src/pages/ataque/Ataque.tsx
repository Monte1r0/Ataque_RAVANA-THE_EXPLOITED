import { useState, useEffect } from 'react';

function Ataque() {
  const [host, setHost] = useState('');
  const [isAttacking, setIsAttacking] = useState(false);
  const [attackData, setAttackData] = useState<string[]>([]);
  const [counter, setCounter] = useState(0);

  const simulateAttackLog = () => {
    const logs = [
      `Hash collision attempt detected ${host}.`,
      `Malicious API requests detected ${host}.`,
      `Sending packets overloading the network ${host}.`,
      `API authentication failed ${host}.`,
      `Ongoing brute force attacks ${host}.`,
    ];

    return logs[Math.floor(Math.random() * logs.length)];
  };

  useEffect(() => {
    let intervalId: number | undefined;

    if (isAttacking) {
      intervalId = window.setInterval(() => {
        setCounter((prev) => prev + Math.floor(Math.random() * 500) + 100);
        setAttackData((prev) => [
          ...prev,
          `Log #${prev.length + 1}: ${simulateAttackLog()}`,
        ]);
      }, 1000);
    }

    return () => {
      if (intervalId !== undefined) {
        clearInterval(intervalId);
      }
    };
  }, [isAttacking, host]);

  const handleStartAttack = () => {
    if (host) {
      setIsAttacking(true);
      setCounter(0);
      setAttackData([]);
      console.log(`Iniciando ataque no host: ${host}`);
    } else {
      console.log('Por favor, insira um host válido.');
    }
  };

  const handleStopAttack = () => {
    setIsAttacking(false);
    console.log('Parando ataque');
  };

  return (
    <div className="bg-gradient-to-r from-gray-900 to-black min-h-screen flex flex-col items-center justify-center p-8">
      <div className="bg-gray-800 rounded-lg shadow-lg p-6 text-center max-w-md">
        <h1 className="text-white text-4xl font-bold mb-6 animate-pulse">Ataque RAVANA</h1>
        <p className="text-gray-400 mb-4">
          Insira o <span className="font-semibold text-white">host</span> que será o alvo do ataque.
        </p>
        <input
          type="text"
          value={host}
          onChange={(e) => setHost(e.target.value)}
          placeholder="Digite o host do alvo"
          className="w-full p-3 rounded-md border border-gray-600 bg-gray-700 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-600 transition duration-200"
        />
        <div className="mt-6 flex justify-around">
          <button
            onClick={isAttacking ? handleStopAttack : handleStartAttack}
            className={`${
              isAttacking ? 'bg-red-600' : 'bg-green-600'
            } hover:bg-red-700 text-white px-6 py-3 rounded-md shadow transition duration-200 transform hover:scale-105 flex items-center justify-center`}
          >
            {isAttacking ? (
              <>
                <svg
                  className="animate-spin h-5 w-5 mr-3 text-white"
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                >
                  <circle
                    className="opacity-25"
                    cx="12"
                    cy="12"
                    r="10"
                    stroke="currentColor"
                    strokeWidth="4"
                  ></circle>
                  <path
                    className="opacity-75"
                    fill="currentColor"
                    d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4z"
                  ></path>
                </svg>
                Atacando...
              </>
            ) : (
              'Iniciar Ataque'
            )}
          </button>
          {isAttacking && (
            <button
              onClick={handleStopAttack}
              className="bg-red-600 hover:bg-red-700 text-white px-5 py-3 rounded-md shadow transition duration-200 transform hover:scale-105"
            >
              Parar Ataque
            </button>
          )}
        </div>
      </div>

      {isAttacking && (
        <div className="mt-8 w-full max-w-3xl bg-gray-900 p-6 rounded-lg shadow-lg text-white">
          <h2 className="text-xl font-bold mb-4">Ataque</h2>
          <p className="mb-4">Pacotes enviados: {counter}</p>
          <div className="h-64 overflow-y-scroll bg-gray-800 p-4 rounded-md">
            {attackData.map((log, index) => (
              <p key={index} className="text-sm text-green-400 mb-2">{log}</p>
            ))}
          </div>
        </div>
      )}

      <footer className="mt-8 text-gray-400 text-sm">
        <p>&copy; 2024 Projeto RAVANA. Todos os direitos reservados.</p>
      </footer>
    </div>
  );
}

export default Ataque;
